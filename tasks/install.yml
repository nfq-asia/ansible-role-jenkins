---
- name: Ensure dependencies are installed.
  apt:
    update_cache: true
    name:
      - curl
      - apt-utils
      - apt-transport-https
      - gnupg
      - openjdk-11-jdk-headless
    state: present

- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    update_cache: true
  when: jenkins_repo_url | length > 0

- name: Download specific Jenkins version.
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
    dest: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
  when: jenkins_version is defined

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
  register: specific_version
  when: jenkins_version is defined

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
    state: present
  when: jenkins_version is defined and specific_version.stat.exists

- name: Ensure Jenkins is installed.
  apt:
    name: jenkins
    state: "{{ jenkins_package_state }}"
    update_cache: true

- name: Ensure Jenkins is started and runs on startup.
  service:
    name: jenkins
    state: started
    enabled: true

- name: Wait for Jenkins to start up before proceeding.
  command: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  args:
    warn: false
  register: result
  until: >
    (result is defined and result.stdout_lines | join('') | regex_search("403 Forbidden"))
    or (result is defined and result.stdout_lines | join('') | regex_search("200 OK"))
    and not (result is defined and result.stdout_lines | join('') | regex_search("Please wait while"))
  retries: "2"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false
  ignore_errors: true
  register: wait_result

- debug:
    var: wait_result


- name: Check if jenkins_init_file exists.
  stat:
    path: "{{ jenkins_init_file }}"
  register: jenkins_init_file_stat

- name: Ensure jenkins_init_file exists.
  file:
    path: "{{ jenkins_init_file }}"
    state: touch
  when: not jenkins_init_file_stat.stat.exists

- name: Modify variables in init file.
  lineinfile:
    dest: "{{ jenkins_init_file }}"
    insertafter: '^{{ item.option }}='
    regexp: '^{{ item.option }}=\"\${{ item.option }} '
    line: '{{ item.option }}="${{ item.option }} {{ item.value }}"'
    state: present
  with_items: "{{ jenkins_init_changes }}"
  notify: restart jenkins

- name: Set the Jenkins home directory.
  lineinfile:
    dest: "{{ jenkins_init_file }}"
    regexp: '^JENKINS_HOME=.*'
    line: 'JENKINS_HOME={{ jenkins_home }}'
  notify: restart jenkins

- name: Set HTTP port in Jenkins config.
  lineinfile:
    backrefs: true
    dest: "{{ jenkins_init_file }}"
    regexp: '^{{ jenkins_http_port_param }}='
    line: '{{ jenkins_http_port_param }}={{ jenkins_http_port }}'
  notify: restart jenkins

- name: Ensure jenkins_home {{ jenkins_home }} exists
  file:
    path: "{{ jenkins_home }}"
    state: directory
    owner: jenkins
    group: jenkins
    mode: u+rwx
    follow: true

- name: Check if need to bypass init wizard
  stat:
    path: "{{ jenkins_home }}/secrets/initialAdminPassword"
  register: jenkins_init_passwd_stat

- name: Read admin pwd
  command: cat {{ jenkins_home }}/secrets/initialAdminPassword
  register: adminpwd
  when: jenkins_init_passwd_stat.stat.exists

- name: Make sure first user name is not reserved
  fail: msg="jenkins_admin_username cannot be admin, anonymous or authenticated"
  when: (jenkins_admin_username == "admin") or
    (jenkins_admin_username == "anonymous") or
    (jenkins_admin_username == "authenticated")

- name: Configure first user
  jenkins_script:
    script: |
      import hudson.security.*
      import jenkins.model.*
      def instance = jenkins.model.Jenkins.getInstance()
      def hudsonRealm = new HudsonPrivateSecurityRealm(false)

      println "** Creating local admin user {{ jenkins_admin_username }}"
      hudsonRealm.createAccount('{{ jenkins_admin_username }}',
        '{{ jenkins_admin_password }}')
      instance.setSecurityRealm(hudsonRealm)
      def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
      strategy.setAllowAnonymousRead(false)
      instance.setAuthorizationStrategy(strategy)
      instance.save()
    user: admin
    password: "{{ adminpwd.stdout }}"
  when: jenkins_init_passwd_stat.stat.exists

- name: Complete setup wizard
  jenkins_script:
    script: |
      import static jenkins.model.Jenkins.instance as jenkins
      import jenkins.install.InstallState
      if (!jenkins.installState.isSetupComplete()) {
        InstallState.INITIAL_SETUP_COMPLETED.initializeState()
      }
    user: admin
    password: "{{ adminpwd.stdout }}"
  when: jenkins_init_passwd_stat.stat.exists

- name: Bypass initialAdminPassword
  command: >
    mv {{ jenkins_home }}/secrets/initialAdminPassword
    {{ jenkins_admin_password_file }}
  notify: restart jenkins
  when: jenkins_init_passwd_stat.stat.exists

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}\
      {{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: >
    "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or
    'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: false
